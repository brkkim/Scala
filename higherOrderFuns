object higherOrderFuns {
  val double = (i: Int) => i * 2
  def higherOrder (x: Int, y:Int => Int) = y(x)
  
  higherOrder(6, double)
  
  val triple = (i: Int) => i * 3
  higherOrder(6, triple)
  
  //function that returns a function
  def sayHello = (name: String) => {"Hello " + name}
  sayHello("Brian")
  var message = sayHello("Brian")
  
  //Closure = function that depends on value that is defined outside function itself
  var y = 5
  val multiplier = (x: Int) => x * y
  multiplier (10)
}
